一、线程

    什么是线程？

        线程是进程中单一顺序的控制流。

    什么是进程？

        进程是程序运行的过程。

    1、进程与线程的关系：

       1）线程是进程的最小执行单元；

       2）一个进程中至少存在一个线程；

       3）线程决定进程的生命周期 ―― 一个线程启动，进程就开始执行；所有线程执行结束，这个进程执行结束；

       4）多个线程共享一个进程的内存空间、一组系统资源。


    2、进程与线程的区别：

       1）每个进程都有自己的独立的内存空间、一组系统资源，而线程共享所属进程的内存空间、一组系统资源；

             进程是独立的，同一个进程的线程是有联系的。

       2）进程之间通信开销较大，线程之间通信开销较小。

    3、多线程

       一个进程中可以同时存在多个线程；

       同一个进程中的多个线程之间可以并发执行；

       多线程的执行方式：抢占式；

           抢占CPU资源，计算机由CPU执行程序，只有拥有CPU资源的程序，才会被执行。

           CUP资源：CUP的控制权，这个控制权具有时间性，时间长度是随机的；这段时间非常短，所以将其称为时间片。

                    时间片：线程抢占到一段"CPU控制权"的时间。


    4、多线程内存如何分配

       栈                 独立


       堆                 共享


       方法区             共享


       程序计数器         独立

           记录程序执行到位置。


    5、自定义线程的两种方式：

       1）继承Thread类，重写run()方法

          创建线程对象：

              new 子类的构造方法(参数列表);

       2）实现Runnable接口，重写run()方法

          创建线程对象：

              new Thread(new 实现类构造方法(参数列表));

           注意：Runnable接口只有一个run()方法。


       3）两种创建方式的区别：

          继承Thread的类,不能再继承其他类；实现Runnable接口的类，还可以继承其他类。

          继承Thread的类，一个线程一个实例对象；实现Runbable接口的类，多个线程可共享一个实例对象。


    6、Thread类常用方法：


        void start() 
            //使该线程开始执行；Java 虚拟机调用该线程的 run 方法。 

        static void yield() 
            //暂停当前正在执行的线程对象，并执行其他线程。 

        static void sleep(long millis) 
            //在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）。 

        void interrupt() 
            //中断线程。 

        int getPriority() 
            //返回线程的优先级。 

        void setPriority(int newPriority) 
            //更改线程的优先级。   优先级的范围：1..10   1最小，10最大，默认5。

        boolean isAlive() 
            //测试线程是否处于活动状态。  活的状态：就绪、运行、阻塞
   
        static int activeCount() 
            //返回当前线程的线程组中活动线程的数目。 

        void join() 
            //等待该线程终止。 



    7、线程五大状态

       1）新建状态

          使用new关键字创建线程对象，此时就是新建状态。

       2）就绪状态

          线程对象调用start方法,进入就绪状态。

       3）运行状态

          线程获得CUP资源，执行run()方法，进入运行状态。

       4）阻塞状态

          调用sleep()方法、等待I/O资源、、等待同步锁、调用wait()等待被唤醒等，进入阻塞状态。

          注意：进入阻塞状态的线程，会立刻让出CPU资源（控制权）。

       5）结束状态

          run()执行完毕，进入结束状态；  正常结束。

          调用stop()、destroy()方法，进入结束状态；  异常结束。

          使用interrupt()方法设置中断标识，当线程发生阻塞时，进入结束状态；  异常结束。


     8、线程的协作

        1）join();   当前线程等待另一个线程执行结束。


        2）wait()与notify()、notifyAll();

           这个三个方法是Object类的方法，任何类间接或直接继承Object类，所以是资源对象的方法。

           这个三个方法在资源类的方法中调用，且该方法必须是同步方法或方法中使用同步语句块（wait()、notify()、
           notifyAll()在同步语句块中）；让当前访问方法的线程等待或唤醒其他线程。

           wait()  //导致当前访问资源对象线程等待。

           notify()  //唤醒在此对象监视器上等待的单个线程。
                     //如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的。

           notifyAll()  //唤醒在此对象监视器上等待的所有线程。

     
     9、线程的结束

        正常结束：run方法执行完毕。

        异常结束：使用stop()、destroy()方法强制结束线程，已过时，不推荐使用。

                  使用interrupt()方法中断线程，来实现强制结束线程。

        注意：interrupt()方法的本意并不是强制结束线程，而是设置中断标识，设置了中断标识的线程，在发生阻塞时，
              抛出异常，进入就绪状态。

              要实现强制结束线程，run方法中的实现（代码）全写在try{}中，若抛出异常，try{}中的剩余代码不再执行，
              异常处理后，run()方法就执行结束；线程进入结束状态。

     10、线程同步

         1）常见概念：

            资源冲突：多个线程共享同一资源对象，造成资源的冲突。

                      对象的状态与预期的结果不一致，造成数据混乱，这种情况就是资源冲突。

            临界区：会造成资源冲突的区域，一般为成员方法。

            线程安全：多个线程共享同一资源对象，未造成资源的冲突，就说这个资源对象是线程安全的。

                     注意：线程安全以资源对象的角度来看。


         2）解决资源冲突的有效手段 ―― 线程同步

            两种方式：

                同步方法：

                    资源对象的方法添加synchronized修饰符，即使用synchronized修饰符修饰的方法。

                同步语句块

                    synchronized(资源对象) {

                        //访问对象；
                    }

            线程同步的过程：

                线程1                          线程2

                获得同步锁                     若此时访问资源对象，进入阻塞状态，等待同步锁，

                    给资源对象加锁

                访问资源对象

                释放锁

                                               获得同步锁

                                               访问资源对象

                                               释放锁




修饰符：

    类的修饰符

        public

        final

        abstract


    类成员的修饰符

        public

        protedcted

        private

        static

        final

        abstract

        synchronized






练习：

   1、创建可输出任何字符的线程，可控制输出次数。

      创建10线程；线程均执行结束后，输出“程序执行完毕!”。

      


作业：


   1、创建账户类，属性：账号、持卡人、余额；创建线程类，向账户中存入金额；

      创建100个线程，向同一账户对象中，存入金额；每次存入10元；

      输出账户上的余额。

   2、[可选]创建账户类，属性：账号、持卡人、余额；

      创建存款线程，向账户存入金额（随机1..100）；

      创建取款线程，在账户中取出金额（随机1..100），若余额不足，取款线程等待存款线程存入足够的金额。

      两个线程均每隔1s存入或取出金额。

      取款线程，完成20次取款后，线程结束；存款线程跟着结束。         
























































