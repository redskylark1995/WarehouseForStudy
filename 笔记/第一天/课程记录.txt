韦先波
Java简介
Sun Microsystems 于1995年推出
1991 年Sun公司的James Gosling等人开始开发名称为 Oak 的语言。希望用于控制嵌入在有线电视交换盒、PDA等的微处理器
1994年将Oak语言更名为Java
Java 既安全、可移植，又可跨平台，而且人们发现它能够解决Internet 上的大型应用问题

Java特点
简单 - Java 设计人员删除了C++ 中许多复杂的功能，如指针操纵和运算符重载等
面向对象 - 在 Java 中任何东西都是对象。因此，重点集中在数据、应用程序中操作对象的方法以及过程上
健壮性 - Java 在编译和解释时都会检查代码


编译型、解释型语言？
计算机不能直接理解高级语言，只能直接理解机器语言，所以必须要把高级语言翻译成机器语言，计算机才能执行高级语言编写的程序。

 翻译的方式有两种，一个是编译，一个是解释。两种方式只是翻译的时间不同。

编译型语言写的程序执行之前，需要一个专门的编译过程，把程序编译成为机器语言的文件，比如exe文件，以后要运行的话就不用重新翻译了，直接使用编译的结果就行了（exe文件），因为翻译只做了一次，运行时不需要翻译，所以编译型语言的程序执行效率高，但也不能一概而论，部分解释型语言的解释器通过在运行时动态优化代码，甚至能够使解释型语言的性能超过编译型语言。 解释则不同，解释性语言的程序不需要编译，省了道工序，

解释性语言在运行程序的时候才翻译，比如解释性basic语言，专门有一个解释器能够直接执行basic程序，每个语句都是执行的时候才翻译。这样解释性语言每执行一次就要翻译一次，效率比较低。解释是一句一句的翻译。 


编译型与解释型，两者各有利弊。前者由于程序执行速度快，同等条件下对系统要求较低，因此像开发操作系统、大型应用程序、数据库系统等时都采用它，像C/C++、Pascal/Object Pascal（Delphi）等都是编译语言，而一些网页脚本、服务器脚本及辅助开发接口这样的对速度要求不高、对不同系统平台间的兼容性有一定要求的程序则通常使用解释性语言，如Java、JavaScript、VBScript、Perl、Python、Ruby、MATLAB 等等。 但随着硬件的升级和设计思想的变革，编译型和解释型语言越来越笼统，主要体现在一些新兴的高级语言上，而解释型语言的自身特点也使得编译器厂商愿意花费更多成本来优化解释器，解释型语言性能超过编译型语言也是必然的。





Java Web  + Android

ERP OA GIS

Java 讲师

课程安排：

    1、Java SE 3..4星期

       语法基础

           变量、常量、运算符

           流程控制

           数组

       面向对象

       异常处理

       常用API类

       I/O

       集合

       线程

       泛型

       反射

       设计模式：

           单例模式

           工厂模式

           代理模式

           适配器模式

           装饰模式

       1.5、1.6、1.7、1.8新特性

       GUI (淘汰)
 
       Socket 套接字  （淘汰）

       DataPacket 数据包  (淘汰)

       菜鸟教材    http://www.runoob.com/java/java-tutorial.html
        
       

    2、DBMS

         MySql

         Oracle

    3、HTML4/5 + CSS2/3  JavaScript  JQuery  Ajax 

    4、JSP Servlet2/3 

    5、Java Web项目

    6、SSH(Struts2.3+Spring+4.x+Hibernate4.x)

    7、Java Web项目

    8、Spring MVC + Mybatis


一、Java开发环境

    1、了解jdk 1.8

       1）安装 jdk，熟悉jdk目录结构

          java

               jdk  开发环境 + 运行环境
                   
                   bin    可执行文件，比如：javac.exe 编译   java.exe 运行

                   db   Java的小型数据库

                   include   存放用于本地方法的文件

                   jre   运行环境

                   lib   Java提供的一些类，.jar包，称为类库

                   src.zip   源码


               jre  运行环境


       2）配置环境变量

          path    可执行文件目录的路径

          classpath    可能需要使用到的工具类的路径

          java_home   指定jdk的目录        [可选的]


       3）编写第一个Java程序

          HelloWorld.java

          Java程序的执行过程：

              编译：javac HelloWorld.java

                    生成“.class”字节码文件

              运行：java HelloWorld

                    a) 类加载器，加载类，即加载class文件

                    b) 字节码校验器，校验代码，检测是否存在非法代码

                    c) 解释器，解释代码，生成机器指令

                    d) 发送指令给CPU，影响硬件，显示屏显示效果

                    JIT代码生成器：

                       JIT(Just In Time) 即时编译，第一次解释生成的指令缓存在内存中，其后在这                                         个java程序，不再加载-->校验-->解释。

               -d  指定编译后生成的class文件存放的位置

                   javac -d d:\target HelloWorld.java

               -cp  指定查找类的路径

                   java -cp d:\target HelloWorld

二、注释

    //    单行注释

    /* */    多行注释

    /**  */    文档注释，也是一种多行注释，会被写入到生成的帮助文档中。


    javadoc 命令

        用于生成Java程序的API文档（帮助文档）

        javadoc HelloWorld.java 

三、打包Java程序

    jar 命令

        用于将Java程序打包成Jar包；

        jar作用:

           作为第三方的插件，引入到Java项目中，程序可以直接使用包中的类；

           安装了jdk的计算机，可以将其做为可执行文件。


        jar cvf ***.jar  Helloworld.class     只打包HelloWorld.class文件

        jar cvf ***.jar  *      打包目录下所有的文件

      






















    




