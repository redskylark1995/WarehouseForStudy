一、抽象类与接口的区别？

    1、继承特性：

       抽象类：只支持单一继承；

       接口：支持多重继承。

    2、定义的角度：

       抽象类：abstract修饰符修饰的类，访问权限修饰符 abstract class 类名{}；

       接口：使用interface关键字定义一个接口，访问权限修饰符 [abstract] interface 接口名{}。

    3、内部成员：

       抽象类：成员变量、成员方法、构造方法、抽象方法、语句块、静态块、内部类；

       接口：常量、抽象方法（可以省略abstract修饰符），jdk1.8+还有默认方法、静态方法。

    4、is-a关系（子类继承抽象类，实现类实现接口）：

       抽象类：使用extends关键字，继承一个抽象类；

       接口：使用implements关键字，实现一个或多个接口，接口名以“,”隔开。


二、Serializable接口

    序列化接口

    Serializable接口比较特殊又被称做marker,因为它没有任何方法要被实现。

    public interface Serializable {

    }

    作用：用于标记――实现Serializable接口的类的对象可以被序列化，这种对象称为可序列化对象。

         1）使对象可以在网络上传输；

         2）可以使对象写到文件中。

三、内部类

    所谓内部类，就是在类内部定义的类。

    内部类和外层封装它的类之间存在逻辑上的所属关系。

    内部类一般用在定义它的类或语句块之内，在外部引用它时必须给出完整的名称。

    内部类的类名不能与包含它的类名相同。

    内部类可以使用包含它的类的静态和实例成员变量，也可以使用它所在方法的局部变量。

    内部类做为类的成员（类中方法外定义的），基本可以使用类成员的所有修饰符。

    1、内部类的分类：

       1）普通内部类

       2）方法本地内部类

       3）静态嵌套内部类

       4）匿名类

          没有名称内部类；

          一般是在一个类只会用到一次的时候，考虑使用匿名类；

          一个匿名类的创建，需要一个父类或接口。

四、常用API类

    1、String

       字符串――字符的序列。

       String被定义为final，是最终类。

       String类储存值得value数组也定义为final，是最终变量，值不允许修改，所以字符串相加，会产生一个新的字符串对象。

       1）String赋初值null与""的区别？

          null: 栈中不存在值;

          "": 栈存在值，指向常量池中""(空字符串)对象。

       2）定义字符串：

          String str = "字符串常量";

          String str = new String("字符串常量");

          String str = new String(字符型数组);

          字符串常量存在于常量池中。

          使用new关键字创建的字符串对象存于堆中。

          String引用型的变量的值是常量池中或堆中字符串对象的地址。

       3）String类的常用方法：

          length()  //返回此字符串的长度。

          charAt(int index)  //返回指定索引处的 char 值。

          concat(String str) //将指定字符串连接到此字符串的结尾。

          indexOf(String str) //返回指定子字符串在此字符串中第一次出现处的索引。

          indexOf(String str, int fromIndex)  //返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。

          lastIndexOf(String str) //返回指定字符在此字符串中最后一次出现处的索引。

          int lastIndexOf(String str, int fromIndex) 
          //返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。 

          replace(char oldChar, char newChar) 
          //返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。

          replace(CharSequence target, CharSequence replacement) 
          //使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。

          replaceAll(String regex, String replacement) 
          //使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。

          replaceFirst(String regex, String replacement) 
          //使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。

          substring(int beginIndex) 
          //返回一个新的字符串，它是此字符串的一个子字符串。

          substring(int beginIndex, int endIndex) 
          //返回一个新字符串，它是此字符串的一个子字符串。
            beginIndex - 起始索引（包括）。
            endIndex - 结束索引（不包括）。 

          public String[] split(String regex)  //根据给定正则表达式的匹配拆分此字符串。

          trim()  //返回字符串的副本，忽略前导空白和尾部空白。 



          equals(Object anObject)  //将此字符串与指定的对象比较。

          equalsIgnoreCase(String anotherString)  //将此 String 与另一个 String 比较，不考虑大小写。

          startsWith(String prefix)  //测试此字符串是否以指定的前缀开始。

          endsWith(String suffix)  //测试此字符串是否以指定的后缀结束。

          contains(CharSequence s) //当且仅当此字符串包含指定的 char 值序列时，返回 true。


          toLowerCase()  //使用默认语言环境的规则将此 String 中的所有字符都转换为小写。

          toUpperCase()  //使用默认语言环境的规则将此 String 中的所有字符都转换为大写。

          toCharArray()  //将此字符串转换为一个新的字符数组。

          getBytes() 
          //使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。


    2、StringBuffer与StringBuilder


    3、Wrapper

       八大封装类


    4、Math

       数学函数类

       Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。

       1、常用方法：

          random()  //返回带正号的 double 值，该值大于等于 0.0 且小于 1.0。

          round(double a)  //返回最接近参数的 long。

          pow(double a, double b)  //返回第一个参数的第二个参数次幂的值。
      

    5、Date


    6、Timestamp


    7、Calendar


    8、DataFormat


    9、Class


    10、Properties


    11、Runtime






修饰符：

    类的修饰符

        public

        final

        abstract


    类成员的修饰符

        public

        protedcted

        private

        static

        final

        abstract






练习：

   1、已知存在URL路径：http://www.gov.cn/premier/2017-07/20/content_5212081.htm

      1）获得访问文件的类型（后缀）；

      2）获得访问文件的文件名，不包括后缀；

      3）判断请求的路径是否是安全协议；

      4）获得文件在服务器中目录结构

         输出格式如下：

             premier

                 2017-07

                    20  

                      content_5212081.htm


作业：


   1、设计程序判断一个字符串是否是由字母和数字组成。

   2、已知字符串数据：number=01201&name=Tom&gender=男&birthday=1997-07-21

      解析字符串数据，并封装成人员类Person的对象。

   3、设计随机点名程序，控制台输出姓名

      提示：

          Math.random()

          String类型的数组

































































