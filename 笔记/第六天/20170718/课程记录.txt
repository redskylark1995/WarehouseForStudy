一、类与类之间的关系

    is a

        继承关系

        A类   B类

        class B extends A {


        }

        B类继承A类  可以说：B is a A

    has a

        关联关系

        class A {
              
        }

        class B {
             
            private A a;

        }

        B类关联A类   可以说：B has a A 

        聚合：表示两个对象之间是整体和部分的弱关系，两个类的对象的生命周期不同步。

              比如：上例中B类是整体，A类是部分。

              B类对象先创建，A类对象后创建；一起销毁。

              A类对象先创建，B类对象后创建；一起销毁。

              A类对象、B类对象一起创建，B类对象先销毁，A类对象后销毁。

              A类对象、B类对象一起创建，A类对象先销毁，B类对象后销毁。

              .......
              

        组合：表示两个对象之间是整体和部分的强关系，两个类的对象的生命周期同步。

              A类对象、B类对象一起创建，再一起销毁。


        

        对象的生命周期：

            创建    使用new关键字创建一个对象；

            使用    使用对象名.***形式访问；

            销毁    资源回收机制自动销毁。


    use a

        依赖关系

        class A {

            public void method() {}

        }

        class B {

            public void method() {

                A a = new A();
                a.methd();
            }

        }

        B类依赖A类   可以说： B use a A


二、多态性

    一个事物多种状态。

    1、重写，又称为覆盖

       重写发生在is-a关系的两个类之间。

       子类重写父类中拥有访问权限的属性或方法，一旦重写，通过子类对象访问这些属性与方法，访问的是子类自己的属性和方法

       ，父类中被子类重写的属性和方法被隐藏（通过子类对象访问不到）。

       重写属性：

           属性名相同――定义属性与父类中属性名相同。

       重写方法：

           方法声明基本相同：

               返回值类型、方法名、参数列表(参数类型、参数个数)必须相同；

               返回值类型可以是子类类型（父类方法返回值类型的子类）；

               访问权限不能比父类访问权限严谨；

               抛出的异常不能比父类的异常范围大。

       重写是运行时多态。

           继承关系类之间，可以将子类的对象赋值给父类的引用，通过这个引用可以访问到子类中重写的方法（且只能访问到重写
           的方法，不能访问子类自定义的属性或方法、静态方法、子类重写的属性）。一个父类可以有多个子类，不同子类重写的
           方法中的方法体一般不相同。不同的子类对象可以赋值给同一个父类的引用，这样实现了一个父类引用访问多个不同子类
           的对象，这就是一种多态性。

           上述这种多态性，在程序运行时，才能确定，所以称为运行时多态。

               对象在运行时创建，赋值的过程、访问对象均在运行时。


    2、重载

       多个方法共享同一个方法名，参数类型与个数不同。

       区分重载的条件：参数类型、个数不相同。

       重载一般发生在同一个类中，一个方法名被多个方法使用，根据参数的类型与参数的个数来区分不同的方法。

       一个方法名对应多个参数列表不同的方法，这也是一种多态性。

       上述这种多态性，在编译时，就会检测是否发生了重载，这种多态性是在编译确定的，所以称为编译时多态。

       
       成员方法可以发生重载，构造方法也可以重载。


    3、对象的转型

       对象的转型只能发生在拥有is-a关系的类之间。

       1）上转型（上溯转型）

           自动类型转换

           子类的对象赋值给父类或间接父类的引用变量。

           父类  变量名 = new 子类构造方法();

           或

           子类  子类变量名 = new 子类构造方法();

           父类  父类变量名 = 子类变量名;


       2）下转型 (下溯转型、造型)

           强制类型转换

           父类类型的引用强制转型成子类类型，再赋值给子类的引用变量。

           子类  子类变量名 = (子类) 父类变量名;

           下转型遵守规则：先上后下， 先上转型，才能下转型。


三、Object类

    Object类是所有Java类的根父类，任何类间接或直接继承Object类。

    如果在类的声明中未使用extends关键字指明其父类，则默认父类为Object类。 

        public class Person {

	   ...

	}

	等价于：

        public class Person extends Object {

           ...

        }

四、instanceof关键字

    用于判断一个对象是否是某个类的实例。

    if(对象名 instanceof 类名) {

       .....

    }

    对象是一个类的实例时，返回true; 判断对象是否是其类父类的实例，返回结果也为true;




修饰符：

    类的修饰符

        public

        final


    类成员的修饰符

        public

        protedcted

        private

        static

        final






练习：

   1、定义商品类（Goods），属性：名称、单价、数量、生产日期、保质期

      使用到封装性；

      定义公共的Setter、Getter方法；

      定义输出基本信息的方法；

      定义方法计算本商品的总资产。


      
      定义类服装类，继承商品类，属性：型号、颜色、打折率

          定义构造方法，初始化属性；

          定义公共Setter、Getter方法；

          重写输出基本信息的方法；

          重写计算本商品的总资产。


      定义类计算机类，继承商品类，属性：型号、硬盘、内存、CPU、显卡；

          定义构造方法，初始化属性；

          定义公共Setter、Getter方法；

          重写输出基本信息的方法；

          重写计算本商品的总资产。

          要求：硬盘、内存、CPU、显卡的类型是设备类的类型


      定义类计算机设备类，属性：型号、单价、基本信息

          定义构造方法，初始化属性；

          定义公共Setter、Getter方法；

          定义输出基本信息的方法。

      定义使用者类。


2、定义人员类，属性：姓名、性别、出生年月

   属性与方法均是受保护；

   定义公共Setter、Getter方法；

   
   定义学生类，继承人员类，属性：学校、语文、数学、英语

       定义构造方法，初始化属性。

       定义公共Setter、Getter方法；

       定义计算成绩的方法。


   定义职员类，继承人员类，属性：入职时间、基本工资、绩效

       定义构造方法，初始化属性。

       定义公共Setter、Getter方法；

       定义方法计算本月工资。

       定义方法计算年度工资（最理想情况）。

   定义使用者类

       定义方法，参数为Person类型；判断参数类型：

           若类型是学生：计算成绩；

           若类型是职员：计算本月工资，最大年度工资。

           




































































