一、异常处理机制

    1、什么异常？

       异常（Exception）是一种特殊的运行错误，是在程序运行过程中发生、会打断程序正常执行的错误。

    2、Java程序运行过程中所发生的异常事件可分为两类：

       1）Error（错误）―― JVM系统内部错误、资源耗尽等严重情况，对于这种错误是无能为力的，无法使用程序处理这种错误。

       2）Exception（违例）―― 其它因编程错误或偶然的外在因素导致的一般性问题，可以使用程序处理这种错误。

          Exception的分类：

              编译时异常（非运行异常）―― 编译时检测程序是否对其进行了处理的异常，若未处理，编译不通过。

                                          这类异常必须处理（使用程序处理），这类异常由程序抛出并处理。

              运行时异常 ―― 编译时不检测程序是否对其进行了处理的异常，无论是否处理，编译均能通过。

                             未对这类异常进行处理，这类异常由Java运行系统自动抛出并自动处理。

    
    3、处理异常

       1）try..catch语句结构

          捕获与处理异常。

          语法结构:

              try{

	           ......	//可能产生违例的代码

              } catch( ExceptionName1 e ){

	           ......	//当产生ExceptionName1型违例时的处置措施

              } catch( ExceptionName2 e ){

                   ...... 	//当产生ExceptionName2型违例时的处置措施

              } [finally{

                   ......	 //无条件执行的语句

              }]

              try{}语句块，用于选定捕获异常范围。

                  若这个范围中的代码抛出了异常，try语句块就捕获到一个异常对象，与catch中的异常类型进行匹配。

              catch{}语句块，匹配异常类型，匹配到，语句块中处理异常。

                  如何匹配异常类型？

                      catch语句块可以有多个，称为多重catch；按照书写顺序从上向下依次匹配异常，若匹配到异常，在catch
                  语句块中处理异常，不再匹配异常；若未匹配到，匹配下一个语句块；若最后一个catch语句块也不匹配，将由
                  Java运行时系统来处理这个异常。                     

              finally{}语句块，作为try..catch语句结构的统一出口，完成一些清理资源的操作。

                  不论在try{}代码块中是否发生了异常事件，finally{}块中的语句都会被执行。

              注意：

                   a) try{}未出现异常事件，catch{}不匹配异常，不执行；

                   b）try{}出现异常事件，程序抛出异常，抛出异常位置后面的代码不再执行，即终止try{}中代码的执行；

                   c）try{}不能单独存在，catch{}或finally{}可以省略，要不try{}与catch{}一起使用，
                      要不try{}与finally{}一起使用，或者try{}、catch{}、finally{}三者一起使用；

                   d）多重catch，指定catch{}中的异常类型时，必须遵守规则：先子类，后父类（先特殊，后一般）；

                   e）如果try或者catch块有return指令,finally还是会被执行,流程先跳到finally然后再回到return指令。



       2）throws子句

          抛出异常，声明方法抛出的异常类型。

          方法声明时，指定方法抛出异常的类型；方法中代码，遇到声明抛出的异常类型，可以不用处理，由方法的调用者处理。

          声明异常表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理。

          语法格式:

              修饰符 返回值类型 方法名(参数列表) throws 异常类名1[,异常类名2][,...][,异常类名n] {

                   //方法体

              }



       3）throw语句

          引发一个异常。
          
          作用：自定义让程序抛出一个异常，就使用throw语句来引发一个异常。

          语法格式：

              throw 异常对象;


    4、自定义异常类

       Java自带的异常类不能满足我们的需求时，就考虑自定义异常类。

       1）创建自定义异常类

          a) 创建类继承Exception或其子类；

          b）重写getMessge()方法。



修饰符：

    类的修饰符

        public

        final

        abstract


    类成员的修饰符

        public

        protedcted

        private

        static

        final

        abstract






练习：

   1、创建人员类Person，属性：姓名、性别、年龄

      1）该类应用封装性；

      2）给属性提供公共的Setter、Getter方法；

      3）Setter方法中添加控制逻辑：性别只能是"男"或女，年龄在0..130之间；

      4）性别、年龄超出取值范围抛出异常；

      5）抛出的是自定义异常，比如：GenderOutOfBoundException、AgeOutOfBoundException；

      6）Setter方法的调用者处理异常。


作业：


   1、






























































